

 module.exports = function(RED) {
    "use strict";

    function MediatorNode(n) {
        RED.nodes.createNode(this,n);


        this.subject = this.name
        this.filename = n.props;
        this.probs = JSON.parse(n.probs)

        this.on("input", function(msg, send, done) {


            this.parents = msg.parents || {};
            this.parent = msg.subject || "";
            let name = this.name;


            // store executed flow path
            if (this.parent != "") {
                // incoming probability
                let incoming = msg.probs[name];
                this.parents={[this.parent]: incoming} 

                // update all outgoing probabilities with incoming probability

                Object.keys(this.probs).forEach(eventName=>
                    {
                        
                        let update = this.probs[eventName]*incoming
                        console.log(eventName , " " , update)
                        this.probs={
                            ... this.probs, 
                            [eventName]:update
                         }
                    }
                )
            }
            msg ={
                subject: this.subject,
                filename: this.filename,
                parents: this.parents,
                probs: this.probs,
            }

            this.
            send(msg);
            this.probs = JSON.parse(n.probs)
            done();
        });
    }

    RED.nodes.registerType("mediator",MediatorNode);


    RED.httpAdmin.post("/mediator/:id", RED.auth.needsPermission("mediator.write"), function(req,res) {
        var node = RED.nodes.getNode(req.params.id);
        if (node != null) {
            try {
                node.receive();
                res.sendStatus(200);
            } catch(err) {
                res.sendStatus(500);
                node.error(RED._("mediator.failed",{error:err.toString()}));
            }
        } else {
            res.sendStatus(404);
        }
    });
}
